=pod

I<Full documentation of builtin functions: L<perlfunc>>

=head2 Perl Functions by Category
X<function>

Here are Perl's functions (including things that look like
functions, like some keywords and named operators)
arranged by category.  Some functions appear in more
than one place.  Any warnings, including those produced by
keywords, are described in L<perldiag> and L<warnings>.

=over 4

=item Functions for SCALARs or strings
X<scalar> X<string> X<character>

=for Pod::Functions =String

L<C<chomp>|/chomp VARIABLE>, L<C<chop>|/chop VARIABLE>,
L<C<chr>|/chr NUMBER>, L<C<crypt>|/crypt PLAINTEXT,SALT>,
L<C<fc>|/fc EXPR>, L<C<hex>|/hex EXPR>,
L<C<index>|/index STR,SUBSTR,POSITION>, L<C<lc>|/lc EXPR>,
L<C<lcfirst>|/lcfirst EXPR>, L<C<length>|/length EXPR>,
L<C<oct>|/oct EXPR>, L<C<ord>|/ord EXPR>,
L<C<pack>|/pack TEMPLATE,LIST>,
L<C<qE<sol>E<sol>>|/qE<sol>STRINGE<sol>>,
L<C<qqE<sol>E<sol>>|/qqE<sol>STRINGE<sol>>, L<C<reverse>|/reverse LIST>,
L<C<rindex>|/rindex STR,SUBSTR,POSITION>,
L<C<sprintf>|/sprintf FORMAT, LIST>,
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>,
L<C<trE<sol>E<sol>E<sol>>|/trE<sol>E<sol>E<sol>>, L<C<uc>|/uc EXPR>,
L<C<ucfirst>|/ucfirst EXPR>,
L<C<yE<sol>E<sol>E<sol>>|/yE<sol>E<sol>E<sol>>

L<C<fc>|/fc EXPR> is available only if the
L<C<"fc"> feature|feature/The 'fc' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"fc"> feature|feature/The 'fc' feature> is enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.

=item Regular expressions and pattern matching
X<regular expression> X<regex> X<regexp>

=for Pod::Functions =Regexp

L<C<mE<sol>E<sol>>|/mE<sol>E<sol>>, L<C<pos>|/pos SCALAR>,
L<C<qrE<sol>E<sol>>|/qrE<sol>STRINGE<sol>>,
L<C<quotemeta>|/quotemeta EXPR>,
L<C<sE<sol>E<sol>E<sol>>|/sE<sol>E<sol>E<sol>>,
L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
L<C<study>|/study SCALAR>

=item Numeric functions
X<numeric> X<number> X<trigonometric> X<trigonometry>

=for Pod::Functions =Math

L<C<abs>|/abs VALUE>, L<C<atan2>|/atan2 Y,X>, L<C<cos>|/cos EXPR>,
L<C<exp>|/exp EXPR>, L<C<hex>|/hex EXPR>, L<C<int>|/int EXPR>,
L<C<log>|/log EXPR>, L<C<oct>|/oct EXPR>, L<C<rand>|/rand EXPR>,
L<C<sin>|/sin EXPR>, L<C<sqrt>|/sqrt EXPR>, L<C<srand>|/srand EXPR>

=item Functions for real @ARRAYs
X<array>

=for Pod::Functions =ARRAY

L<C<each>|/each HASH>, L<C<keys>|/keys HASH>, L<C<pop>|/pop ARRAY>,
L<C<push>|/push ARRAY,LIST>, L<C<shift>|/shift ARRAY>,
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST>,
L<C<unshift>|/unshift ARRAY,LIST>, L<C<values>|/values HASH>

=item Functions for list data
X<list>

=for Pod::Functions =LIST

L<C<grep>|/grep BLOCK LIST>, L<C<join>|/join EXPR,LIST>,
L<C<map>|/map BLOCK LIST>, L<C<qwE<sol>E<sol>>|/qwE<sol>STRINGE<sol>>,
L<C<reverse>|/reverse LIST>, L<C<sort>|/sort SUBNAME LIST>,
L<C<unpack>|/unpack TEMPLATE,EXPR>

=item Functions for real %HASHes
X<hash>

=for Pod::Functions =HASH

L<C<delete>|/delete EXPR>, L<C<each>|/each HASH>,
L<C<exists>|/exists EXPR>, L<C<keys>|/keys HASH>,
L<C<values>|/values HASH>

=item Input and output functions
X<I/O> X<input> X<output> X<dbm>

=for Pod::Functions =I/O

L<C<binmode>|/binmode FILEHANDLE, LAYER>, L<C<close>|/close FILEHANDLE>,
L<C<closedir>|/closedir DIRHANDLE>, L<C<dbmclose>|/dbmclose HASH>,
L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>, L<C<die>|/die LIST>,
L<C<eof>|/eof FILEHANDLE>, L<C<fileno>|/fileno FILEHANDLE>,
L<C<flock>|/flock FILEHANDLE,OPERATION>, L<C<format>|/format>,
L<C<getc>|/getc FILEHANDLE>, L<C<print>|/print FILEHANDLE LIST>,
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<readdir>|/readdir DIRHANDLE>, L<C<readline>|/readline EXPR>,
L<C<rewinddir>|/rewinddir DIRHANDLE>, L<C<say>|/say FILEHANDLE LIST>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<seekdir>|/seekdir DIRHANDLE,POS>,
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<tell>|/tell FILEHANDLE>, L<C<telldir>|/telldir DIRHANDLE>,
L<C<truncate>|/truncate FILEHANDLE,LENGTH>, L<C<warn>|/warn LIST>,
L<C<write>|/write FILEHANDLE>

L<C<say>|/say FILEHANDLE LIST> is available only if the
L<C<"say"> feature|feature/The 'say' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"say"> feature|feature/The 'say' feature> is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.

=item Functions for fixed-length data or records

=for Pod::Functions =Binary

L<C<pack>|/pack TEMPLATE,LIST>,
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<unpack>|/unpack TEMPLATE,EXPR>, L<C<vec>|/vec EXPR,OFFSET,BITS>

=item Functions for filehandles, files, or directories
X<file> X<filehandle> X<directory> X<pipe> X<link> X<symlink>

=for Pod::Functions =File

L<C<-I<X>>|/-X FILEHANDLE>, L<C<chdir>|/chdir EXPR>,
L<C<chmod>|/chmod LIST>, L<C<chown>|/chown LIST>,
L<C<chroot>|/chroot FILENAME>,
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>, L<C<glob>|/glob EXPR>,
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>,
L<C<link>|/link OLDFILE,NEWFILE>, L<C<lstat>|/lstat FILEHANDLE>,
L<C<mkdir>|/mkdir FILENAME,MODE>, L<C<open>|/open FILEHANDLE,MODE,EXPR>,
L<C<opendir>|/opendir DIRHANDLE,EXPR>, L<C<readlink>|/readlink EXPR>,
L<C<rename>|/rename OLDNAME,NEWNAME>, L<C<rmdir>|/rmdir FILENAME>,
L<C<select>|/select FILEHANDLE>, L<C<stat>|/stat FILEHANDLE>,
L<C<symlink>|/symlink OLDFILE,NEWFILE>,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
L<C<umask>|/umask EXPR>, L<C<unlink>|/unlink LIST>,
L<C<utime>|/utime LIST>

=item Keywords related to the control flow of your Perl program
X<control flow>

=for Pod::Functions =Flow

L<C<break>|/break>, L<C<caller>|/caller EXPR>,
L<C<continue>|/continue BLOCK>, L<C<die>|/die LIST>, L<C<do>|/do BLOCK>,
L<C<dump>|/dump LABEL>, L<C<eval>|/eval EXPR>,
L<C<evalbytes>|/evalbytes EXPR>, L<C<exit>|/exit EXPR>,
L<C<__FILE__>|/__FILE__>, L<C<goto>|/goto LABEL>,
L<C<last>|/last LABEL>, L<C<__LINE__>|/__LINE__>,
L<C<next>|/next LABEL>, L<C<__PACKAGE__>|/__PACKAGE__>,
L<C<redo>|/redo LABEL>, L<C<return>|/return EXPR>,
L<C<sub>|/sub NAME BLOCK>, L<C<__SUB__>|/__SUB__>,
L<C<wantarray>|/wantarray>

L<C<break>|/break> is available only if you enable the experimental
L<C<"switch"> feature|feature/The 'switch' feature> or use the C<CORE::>
prefix.  The L<C<"switch"> feature|feature/The 'switch' feature> also
enables the C<default>, C<given> and C<when> statements, which are
documented in L<perlsyn/"Switch Statements">.
The L<C<"switch"> feature|feature/The 'switch' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.  In Perl v5.14 and earlier, L<C<continue>|/continue BLOCK>
required the L<C<"switch"> feature|feature/The 'switch' feature>, like
the other keywords.

L<C<evalbytes>|/evalbytes EXPR> is only available with the
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
(see L<feature>) or if prefixed with C<CORE::>.  L<C<__SUB__>|/__SUB__>
is only available with the
L<C<"current_sub"> feature|feature/The 'current_sub' feature> or if
prefixed with C<CORE::>.  Both the
L<C<"evalbytes">|feature/The 'unicode_eval' and 'evalbytes' features>
and L<C<"current_sub">|feature/The 'current_sub' feature> features are
enabled automatically with a C<use v5.16> (or higher) declaration in the
current scope.

=item Keywords related to scoping

=for Pod::Functions =Namespace

L<C<caller>|/caller EXPR>, L<C<import>|/import LIST>,
L<C<local>|/local EXPR>, L<C<my>|/my VARLIST>, L<C<our>|/our VARLIST>,
L<C<package>|/package NAMESPACE>, L<C<state>|/state VARLIST>,
L<C<use>|/use Module VERSION LIST>

L<C<state>|/state VARLIST> is available only if the
L<C<"state"> feature|feature/The 'state' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"state"> feature|feature/The 'state' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.

=item Miscellaneous functions

=for Pod::Functions =Misc

L<C<defined>|/defined EXPR>, L<C<formline>|/formline PICTURE,LIST>,
L<C<lock>|/lock THING>, L<C<prototype>|/prototype FUNCTION>,
L<C<reset>|/reset EXPR>, L<C<scalar>|/scalar EXPR>,
L<C<undef>|/undef EXPR>

=item Functions for processes and process groups
X<process> X<pid> X<process id>

=for Pod::Functions =Process

L<C<alarm>|/alarm SECONDS>, L<C<exec>|/exec LIST>, L<C<fork>|/fork>,
L<C<getpgrp>|/getpgrp PID>, L<C<getppid>|/getppid>,
L<C<getpriority>|/getpriority WHICH,WHO>, L<C<kill>|/kill SIGNAL, LIST>,
L<C<pipe>|/pipe READHANDLE,WRITEHANDLE>,
L<C<qxE<sol>E<sol>>|/qxE<sol>STRINGE<sol>>,
L<C<readpipe>|/readpipe EXPR>, L<C<setpgrp>|/setpgrp PID,PGRP>,
L<C<setpriority>|/setpriority WHICH,WHO,PRIORITY>,
L<C<sleep>|/sleep EXPR>, L<C<system>|/system LIST>, L<C<times>|/times>,
L<C<wait>|/wait>, L<C<waitpid>|/waitpid PID,FLAGS>

=item Keywords related to Perl modules
X<module>

=for Pod::Functions =Modules

L<C<do>|/do EXPR>, L<C<import>|/import LIST>,
L<C<no>|/no MODULE VERSION LIST>, L<C<package>|/package NAMESPACE>,
L<C<require>|/require VERSION>, L<C<use>|/use Module VERSION LIST>

=item Keywords related to classes and object-orientation
X<object> X<class> X<package>

=for Pod::Functions =Objects

L<C<bless>|/bless REF,CLASSNAME>, L<C<dbmclose>|/dbmclose HASH>,
L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>,
L<C<package>|/package NAMESPACE>, L<C<ref>|/ref EXPR>,
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST>, L<C<tied>|/tied VARIABLE>,
L<C<untie>|/untie VARIABLE>, L<C<use>|/use Module VERSION LIST>

=item Low-level socket functions
X<socket> X<sock>

=for Pod::Functions =Socket

L<C<accept>|/accept NEWSOCKET,GENERICSOCKET>,
L<C<bind>|/bind SOCKET,NAME>, L<C<connect>|/connect SOCKET,NAME>,
L<C<getpeername>|/getpeername SOCKET>,
L<C<getsockname>|/getsockname SOCKET>,
L<C<getsockopt>|/getsockopt SOCKET,LEVEL,OPTNAME>,
L<C<listen>|/listen SOCKET,QUEUESIZE>,
L<C<recv>|/recv SOCKET,SCALAR,LENGTH,FLAGS>,
L<C<send>|/send SOCKET,MSG,FLAGS,TO>,
L<C<setsockopt>|/setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL>,
L<C<shutdown>|/shutdown SOCKET,HOW>,
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL>,
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>

=item System V interprocess communication functions
X<IPC> X<System V> X<semaphore> X<shared memory> X<memory> X<message>

=for Pod::Functions =SysV

L<C<msgctl>|/msgctl ID,CMD,ARG>, L<C<msgget>|/msgget KEY,FLAGS>,
L<C<msgrcv>|/msgrcv ID,VAR,SIZE,TYPE,FLAGS>,
L<C<msgsnd>|/msgsnd ID,MSG,FLAGS>,
L<C<semctl>|/semctl ID,SEMNUM,CMD,ARG>,
L<C<semget>|/semget KEY,NSEMS,FLAGS>, L<C<semop>|/semop KEY,OPSTRING>,
L<C<shmctl>|/shmctl ID,CMD,ARG>, L<C<shmget>|/shmget KEY,SIZE,FLAGS>,
L<C<shmread>|/shmread ID,VAR,POS,SIZE>,
L<C<shmwrite>|/shmwrite ID,STRING,POS,SIZE>

=item Fetching user and group info
X<user> X<group> X<password> X<uid> X<gid>  X<passwd> X</etc/passwd>

=for Pod::Functions =User

L<C<endgrent>|/endgrent>, L<C<endhostent>|/endhostent>,
L<C<endnetent>|/endnetent>, L<C<endpwent>|/endpwent>,
L<C<getgrent>|/getgrent>, L<C<getgrgid>|/getgrgid GID>,
L<C<getgrnam>|/getgrnam NAME>, L<C<getlogin>|/getlogin>,
L<C<getpwent>|/getpwent>, L<C<getpwnam>|/getpwnam NAME>,
L<C<getpwuid>|/getpwuid UID>, L<C<setgrent>|/setgrent>,
L<C<setpwent>|/setpwent>

=item Fetching network info
X<network> X<protocol> X<host> X<hostname> X<IP> X<address> X<service>

=for Pod::Functions =Network

L<C<endprotoent>|/endprotoent>, L<C<endservent>|/endservent>,
L<C<gethostbyaddr>|/gethostbyaddr ADDR,ADDRTYPE>,
L<C<gethostbyname>|/gethostbyname NAME>, L<C<gethostent>|/gethostent>,
L<C<getnetbyaddr>|/getnetbyaddr ADDR,ADDRTYPE>,
L<C<getnetbyname>|/getnetbyname NAME>, L<C<getnetent>|/getnetent>,
L<C<getprotobyname>|/getprotobyname NAME>,
L<C<getprotobynumber>|/getprotobynumber NUMBER>,
L<C<getprotoent>|/getprotoent>,
L<C<getservbyname>|/getservbyname NAME,PROTO>,
L<C<getservbyport>|/getservbyport PORT,PROTO>,
L<C<getservent>|/getservent>, L<C<sethostent>|/sethostent STAYOPEN>,
L<C<setnetent>|/setnetent STAYOPEN>,
L<C<setprotoent>|/setprotoent STAYOPEN>,
L<C<setservent>|/setservent STAYOPEN>

=item Time-related functions
X<time> X<date>

=for Pod::Functions =Time

L<C<gmtime>|/gmtime EXPR>, L<C<localtime>|/localtime EXPR>,
L<C<time>|/time>, L<C<times>|/times>

=item Non-function keywords

=for Pod::Functions =!Non-functions

C<and>, C<AUTOLOAD>, C<BEGIN>, C<CHECK>, C<cmp>, C<CORE>, C<__DATA__>,
C<default>, C<DESTROY>, C<else>, C<elseif>, C<elsif>, C<END>, C<__END__>,
C<eq>, C<for>, C<foreach>, C<ge>, C<given>, C<gt>, C<if>, C<INIT>, C<le>,
C<lt>, C<ne>, C<not>, C<or>, C<UNITCHECK>, C<unless>, C<until>, C<when>,
C<while>, C<x>, C<xor>

=back

=head2 Alphabetical Listing of Perl Functions

=over

=item *

C<-X> - a file test (-r, -x, etc)

=item *

C<__FILE__> - the name of the current source file

=item *

C<__LINE__> - the current source line number

=item *

C<__PACKAGE__> - the current package

=item *

C<__SUB__> - the current subroutine, or C<undef> if not in a subroutine

=item *

C<abs> - absolute value function

=item *

C<accept> - accept an incoming socket connect

=item *

C<alarm> - schedule a SIGALRM

=item *

C<atan2> - arctangent of Y/X in the range -PI to PI

=item *

C<bind> - binds an address to a socket

=item *

C<binmode> - prepare binary files for I/O

=item *

C<bless> - create an object

=item *

C<break> - break out of a C<given> block

=item *

C<caller> - get context of the current subroutine call

=item *

C<chdir> - change your current working directory

=item *

C<chmod> - changes the permissions on a list of files

=item *

C<chomp> - remove a trailing record separator from a string

=item *

C<chop> - remove the last character from a string

=item *

C<chown> - change the ownership on a list of files

=item *

C<chr> - get character this number represents

=item *

C<chroot> - make directory new root for path lookups

=item *

C<close> - close file (or pipe or socket) handle

=item *

C<closedir> - close directory handle

=item *

C<connect> - connect to a remote socket

=item *

C<continue> - optional trailing block in a while or foreach

=item *

C<cos> - cosine function

=item *

C<crypt> - one-way passwd-style encryption

=item *

C<dbmclose> - breaks binding on a tied dbm file

=item *

C<dbmopen> - create binding on a tied dbm file

=item *

C<defined> - test whether a value, variable, or function is defined

=item *

C<delete> - deletes a value from a hash

=item *

C<die> - raise an exception or bail out

=item *

C<do> - turn a BLOCK into a TERM

=item *

C<dump> - create an immediate core dump

=item *

C<each> - retrieve the next key/value pair from a hash

=item *

C<endgrent> - be done using group file

=item *

C<endhostent> - be done using hosts file

=item *

C<endnetent> - be done using networks file

=item *

C<endprotoent> - be done using protocols file

=item *

C<endpwent> - be done using passwd file

=item *

C<endservent> - be done using services file

=item *

C<eof> - test a filehandle for its end

=item *

C<eval> - catch exceptions or compile and run code

=item *

C<evalbytes> - similar to string eval, but intend to parse a bytestream

=item *

C<exec> - abandon this program to run another

=item *

C<exists> - test whether a hash key is present

=item *

C<exit> - terminate this program

=item *

C<exp> - raise I<e> to a power

=item *

C<fc> - return casefolded version of a string

=item *

C<fcntl> - file control system call

=item *

C<fileno> - return file descriptor from filehandle

=item *

C<flock> - lock an entire file with an advisory lock

=item *

C<fork> - create a new process just like this one

=item *

C<format> - declare a picture format with use by the write() function

=item *

C<formline> - internal function used for formats

=item *

C<getc> - get the next character from the filehandle

=item *

C<getgrent> - get next group record

=item *

C<getgrgid> - get group record given group user ID

=item *

C<getgrnam> - get group record given group name

=item *

C<gethostbyaddr> - get host record given its address

=item *

C<gethostbyname> - get host record given name

=item *

C<gethostent> - get next hosts record

=item *

C<getlogin> - return who logged in at this tty

=item *

C<getnetbyaddr> - get network record given its address

=item *

C<getnetbyname> - get networks record given name

=item *

C<getnetent> - get next networks record

=item *

C<getpeername> - find the other end of a socket connection

=item *

C<getpgrp> - get process group

=item *

C<getppid> - get parent process ID

=item *

C<getpriority> - get current nice value

=item *

C<getprotobyname> - get protocol record given name

=item *

C<getprotobynumber> - get protocol record numeric protocol

=item *

C<getprotoent> - get next protocols record

=item *

C<getpwent> - get next passwd record

=item *

C<getpwnam> - get passwd record given user login name

=item *

C<getpwuid> - get passwd record given user ID

=item *

C<getservbyname> - get services record given its name

=item *

C<getservbyport> - get services record given numeric port

=item *

C<getservent> - get next services record

=item *

C<getsockname> - retrieve the sockaddr for a given socket

=item *

C<getsockopt> - get socket options on a given socket

=item *

C<glob> - expand filenames using wildcards

=item *

C<gmtime> - convert UNIX time into record or string using Greenwich time

=item *

C<goto> - create spaghetti code

=item *

C<grep> - locate elements in a list test true against a given criterion

=item *

C<hex> - convert a hexadecimal string to a number

=item *

C<import> - patch a module's namespace into your own

=item *

C<index> - find a substring within a string

=item *

C<int> - get the integer portion of a number

=item *

C<ioctl> - system-dependent device control system call

=item *

C<join> - join a list into a string using a separator

=item *

C<keys> - retrieve list of indices from a hash

=item *

C<kill> - send a signal to a process or process group

=item *

C<last> - exit a block prematurely

=item *

C<lc> - return lower-case version of a string

=item *

C<lcfirst> - return a string with just the next letter in lower case

=item *

C<length> - return the number of characters in a string

=item *

C<link> - create a hard link in the filesystem

=item *

C<listen> - register your socket as a server

=item *

C<local> - create a temporary value for a global variable (dynamic scoping)

=item *

C<localtime> - convert UNIX time into record or string using local time

=item *

C<lock> - get a thread lock on a variable, subroutine, or method

=item *

C<log> - retrieve the natural logarithm for a number

=item *

C<lstat> - stat a symbolic link

=item *

C<mE<sol>E<sol>> - match a string with a regular expression pattern

=item *

C<map> - apply a change to a list to get back a new list with the changes

=item *

C<mkdir> - create a directory

=item *

C<msgctl> - SysV IPC message control operations

=item *

C<msgget> - get SysV IPC message queue

=item *

C<msgrcv> - receive a SysV IPC message from a message queue

=item *

C<msgsnd> - send a SysV IPC message to a message queue

=item *

C<my> - declare and assign a local variable (lexical scoping)

=item *

C<next> - iterate a block prematurely

=item *

C<no> - unimport some module symbols or semantics at compile time

=item *

C<oct> - convert a string to an octal number

=item *

C<open> - open a file, pipe, or descriptor

=item *

C<opendir> - open a directory

=item *

C<ord> - find a character's numeric representation

=item *

C<our> - declare and assign a package variable (lexical scoping)

=item *

C<pack> - convert a list into a binary representation

=item *

C<package> - declare a separate global namespace

=item *

C<pipe> - open a pair of connected filehandles

=item *

C<pop> - remove the last element from an array and return it

=item *

C<pos> - find or set the offset for the last/next m//g search

=item *

C<print> - output a list to a filehandle

=item *

C<printf> - output a formatted list to a filehandle

=item *

C<prototype> - get the prototype (if any) of a subroutine

=item *

C<push> - append one or more elements to an array

=item *

C<qE<sol>STRINGE<sol>> - singly quote a string

=item *

C<qqE<sol>STRINGE<sol>> - doubly quote a string

=item *

C<qrE<sol>STRINGE<sol>> - compile pattern

=item *

C<quotemeta> - quote regular expression magic characters

=item *

C<qwE<sol>STRINGE<sol>> - quote a list of words

=item *

C<qxE<sol>STRINGE<sol>> - backquote quote a string

=item *

C<rand> - retrieve the next pseudorandom number

=item *

C<read> - fixed-length buffered input from a filehandle

=item *

C<readdir> - get a directory from a directory handle

=item *

C<readline> - fetch a record from a file

=item *

C<readlink> - determine where a symbolic link is pointing

=item *

C<readpipe> - execute a system command and collect standard output

=item *

C<recv> - receive a message over a Socket

=item *

C<redo> - start this loop iteration over again

=item *

C<ref> - find out the type of thing being referenced

=item *

C<rename> - change a filename

=item *

C<require> - load in external functions from a library at runtime

=item *

C<reset> - clear all variables of a given name

=item *

C<return> - get out of a function early

=item *

C<reverse> - flip a string or a list

=item *

C<rewinddir> - reset directory handle

=item *

C<rindex> - right-to-left substring search

=item *

C<rmdir> - remove a directory

=item *

C<sE<sol>E<sol>E<sol>> - replace a pattern with a string

=item *

C<say> - output a list to a filehandle, appending a newline

=item *

C<scalar> - force a scalar context

=item *

C<seek> - reposition file pointer for random-access I/O

=item *

C<seekdir> - reposition directory pointer

=item *

C<select> - reset default output or do I/O multiplexing

=item *

C<semctl> - SysV semaphore control operations

=item *

C<semget> - get set of SysV semaphores

=item *

C<semop> - SysV semaphore operations

=item *

C<send> - send a message over a socket

=item *

C<setgrent> - prepare group file for use

=item *

C<sethostent> - prepare hosts file for use

=item *

C<setnetent> - prepare networks file for use

=item *

C<setpgrp> - set the process group of a process

=item *

C<setpriority> - set a process's nice value

=item *

C<setprotoent> - prepare protocols file for use

=item *

C<setpwent> - prepare passwd file for use

=item *

C<setservent> - prepare services file for use

=item *

C<setsockopt> - set some socket options

=item *

C<shift> - remove the first element of an array, and return it

=item *

C<shmctl> - SysV shared memory operations

=item *

C<shmget> - get SysV shared memory segment identifier

=item *

C<shmread> - read SysV shared memory

=item *

C<shmwrite> - write SysV shared memory

=item *

C<shutdown> - close down just half of a socket connection

=item *

C<sin> - return the sine of a number

=item *

C<sleep> - block for some number of seconds

=item *

C<socket> - create a socket

=item *

C<socketpair> - create a pair of sockets

=item *

C<sort> - sort a list of values

=item *

C<splice> - add or remove elements anywhere in an array

=item *

C<split> - split up a string using a regexp delimiter

=item *

C<sprintf> - formatted print into a string

=item *

C<sqrt> - square root function

=item *

C<srand> - seed the random number generator

=item *

C<stat> - get a file's status information

=item *

C<state> - declare and assign a persistent lexical variable

=item *

C<study> - no-op, formerly optimized input data for repeated searches

=item *

C<sub> - declare a subroutine, possibly anonymously

=item *

C<substr> - get or alter a portion of a string

=item *

C<symlink> - create a symbolic link to a file

=item *

C<syscall> - execute an arbitrary system call

=item *

C<sysopen> - open a file, pipe, or descriptor

=item *

C<sysread> - fixed-length unbuffered input from a filehandle

=item *

C<sysseek> - position I/O pointer on handle used with sysread and syswrite

=item *

C<system> - run a separate program

=item *

C<syswrite> - fixed-length unbuffered output to a filehandle

=item *

C<tell> - get current seekpointer on a filehandle

=item *

C<telldir> - get current seekpointer on a directory handle

=item *

C<tie> - bind a variable to an object class

=item *

C<tied> - get a reference to the object underlying a tied variable

=item *

C<time> - return number of seconds since 1970

=item *

C<times> - return elapsed time for self and child processes

=item *

C<trE<sol>E<sol>E<sol>> - transliterate a string

=item *

C<truncate> - shorten a file

=item *

C<uc> - return upper-case version of a string

=item *

C<ucfirst> - return a string with just the next letter in upper case

=item *

C<umask> - set file creation mode mask

=item *

C<undef> - remove a variable or function definition

=item *

C<unlink> - remove one link to a file

=item *

C<unpack> - convert binary structure into normal perl variables

=item *

C<unshift> - prepend more elements to the beginning of a list

=item *

C<untie> - break a tie binding to a variable

=item *

C<use> - load in a module at compile time and import its namespace

=item *

C<utime> - set a file's last access and modify times

=item *

C<values> - return a list of the values in a hash

=item *

C<vec> - test or set particular bits in a string

=item *

C<wait> - wait for any child process to die

=item *

C<waitpid> - wait for a particular child process to die

=item *

C<wantarray> - get void vs scalar vs list context of current subroutine call

=item *

C<warn> - print debugging info

=item *

C<write> - print a picture record

=item *

C<yE<sol>E<sol>E<sol>> - transliterate a string

=back