=head2 Pragmatic Modules

They work somewhat like compiler directives (pragmata) in that they
tend to affect the compilation of your program, and thus will usually
work well only when used within a C<use>, or C<no>.  Most of these
are lexically scoped, so an inner BLOCK may countermand them
by saying:

    no integer;
    no strict 'refs';
    no warnings;

which lasts until the end of that BLOCK.

Some pragmas are lexically scoped--typically those that affect the
C<$^H> hints variable.  Others affect the current package instead,
like C<use vars> and C<use subs>, which allow you to predeclare a
variables or subroutines within a particular I<file> rather than
just a block.  Such declarations are effective for the entire file
for which they were declared.  You cannot rescind them with C<no
vars> or C<no subs>.

The following pragmas are defined (and have their own documentation).

=over 12

=item *

B<<< L<< attributes >> >>> - Get/set subroutine or variable attributes

=item *

B<<< L<< autodie >> >>> - Replace functions with ones that succeed or die with lexical scope

=item *

B<<< L<< autodie::exception >> >>> - Exceptions from autodying functions.

=item *

B<<< L<< autodie::exception::system >> >>> - Exceptions from autodying system().

=item *

B<<< L<< autodie::hints >> >>> - Provide hints about user subroutines to autodie

=item *

B<<< L<< autodie::skip >> >>> - Skip a package when throwing autodie exceptions

=item *

B<<< L<< autouse >> >>> - Postpone load of modules until a function is used

=item *

B<<< L<< base >> >>> - Establish an ISA relationship with base classes at compile time

=item *

B<<< L<< bigint >> >>> - Transparent BigInteger support for Perl

=item *

B<<< L<< bignum >> >>> - Transparent BigNumber support for Perl

=item *

B<<< L<< bigrat >> >>> - Transparent BigNumber/BigRational support for Perl

=item *

B<<< L<< blib >> >>> - Use MakeMaker's uninstalled version of a package

=item *

B<<< L<< bytes >> >>> - Expose the individual bytes of characters

=item *

B<<< L<< charnames >> >>> - Access to Unicode character names and named character sequences; also define character names

=item *

B<<< L<< constant >> >>> - Declare constants

=item *

B<<< L<< deprecate >> >>> - Perl pragma for deprecating the inclusion of a module in core

=item *

B<<< L<< diagnostics >> >>> - Produce verbose warning diagnostics

=item *

B<<< L<< encoding >> >>> - Allows you to write your script in non-ASCII and non-UTF-8

=item *

B<<< L<< encoding::warnings >> >>> - Warn on implicit encoding conversions

=item *

B<<< L<< experimental >> >>> - Experimental features made easy

=item *

B<<< L<< feature >> >>> - Enable new features

=item *

B<<< L<< fields >> >>> - Compile-time class fields

=item *

B<<< L<< filetest >> >>> - Control the filetest permission operators

=item *

B<<< L<< if >> >>> - C<use> a Perl module if a condition holds

=item *

B<<< L<< integer >> >>> - Use integer arithmetic instead of floating point

=item *

B<<< L<< less >> >>> - Request less of something

=item *

B<<< L<< lib >> >>> - Manipulate @INC at compile time

=item *

B<<< L<< locale >> >>> - Use or avoid POSIX locales for built-in operations

=item *

B<<< L<< mro >> >>> - Method Resolution Order

=item *

B<<< L<< ok >> >>> - Alternative to Test::More::use_ok

=item *

B<<< L<< open >> >>> - Set default PerlIO layers for input and output

=item *

B<<< L<< ops >> >>> - Restrict unsafe operations when compiling

=item *

B<<< L<< overload >> >>> - Package for overloading Perl operations

=item *

B<<< L<< overloading >> >>> - Lexically control overloading

=item *

B<<< L<< parent >> >>> - Establish an ISA relationship with base classes at compile time

=item *

B<<< L<< re >> >>> - Alter regular expression behaviour

=item *

B<<< L<< sigtrap >> >>> - Enable simple signal handling

=item *

B<<< L<< sort >> >>> - Control sort() behaviour

=item *

B<<< L<< strict >> >>> - Restrict unsafe constructs

=item *

B<<< L<< subs >> >>> - Predeclare subroutine names

=item *

B<<< L<< threads >> >>> - Perl interpreter-based threads

=item *

B<<< L<< threads::shared >> >>> - Perl extension for sharing data structures between threads

=item *

B<<< L<< utf8 >> >>> - Enable/disable UTF-8 (or UTF-EBCDIC) in source code

=item *

B<<< L<< vars >> >>> - Predeclare global variable names

=item *

B<<< L<< version >> >>> - Perl extension for Version Objects

=item *

B<<< L<< vmsish >> >>> - Control VMS-specific language features

=item *

B<<< L<< warnings >> >>> - Control optional warnings

=item *

B<<< L<< warnings::register >> >>> - Warnings import function

=back

=head2 Standard Modules

Standard, bundled modules are all expected to behave in a well-defined
manner with respect to namespace pollution because they use the
Exporter module.  See their own documentation for details.

It's possible that not all modules listed below are installed on your
system. For example, the GDBM_File module will not be installed if you
don't have the gdbm library.

=over 12

=item *

B<<< L<< Amiga::ARexx >> >>> - Perl extension for ARexx support

=item *

B<<< L<< Amiga::Exec >> >>> - Perl extension for low level amiga support

=item *

B<<< L<< AnyDBM_File >> >>> - Provide framework for multiple DBMs

=item *

B<<< L<< App::Cpan >> >>> - Easily interact with CPAN from the command line

=item *

B<<< L<< App::Prove >> >>> - Implements the C<prove> command.

=item *

B<<< L<< App::Prove::State >> >>> - State storage for the C<prove> command.

=item *

B<<< L<< App::Prove::State::Result >> >>> - Individual test suite results.

=item *

B<<< L<< App::Prove::State::Result::Test >> >>> - Individual test results.

=item *

B<<< L<< Archive::Tar >> >>> - Module for manipulations of tar archives

=item *

B<<< L<< Archive::Tar::File >> >>> - A subclass for in-memory extracted file from Archive::Tar

=item *

B<<< L<< Attribute::Handlers >> >>> - Simpler definition of attribute handlers

=item *

B<<< L<< AutoLoader >> >>> - Load subroutines only on demand

=item *

B<<< L<< AutoSplit >> >>> - Split a package for autoloading

=item *

B<<< L<< B >> >>> - The Perl Compiler Backend

=item *

B<<< L<< B::Concise >> >>> - Walk Perl syntax tree, printing concise info about ops

=item *

B<<< L<< B::Deparse >> >>> - Perl compiler backend to produce perl code

=item *

B<<< L<< B::Op_private >> >>> - OP op_private flag definitions

=item *

B<<< L<< B::Showlex >> >>> - Show lexical variables used in functions or files

=item *

B<<< L<< B::Terse >> >>> - Walk Perl syntax tree, printing terse info about ops

=item *

B<<< L<< B::Xref >> >>> - Generates cross reference reports for Perl programs

=item *

B<<< L<< Benchmark >> >>> - Benchmark running times of Perl code

=item *

B<<< L<< C<IO::Socket::IP> >> >>> - Family-neutral IP socket supporting both IPv4 and IPv6

=item *

B<<< L<< C<Socket> >> >>> - Networking constants and support functions

=item *

B<<< L<< CORE >> >>> - Namespace for Perl's core routines

=item *

B<<< L<< CPAN >> >>> - Query, download and build perl modules from CPAN sites

=item *

B<<< L<< CPAN::API::HOWTO >> >>> - A recipe book for programming with CPAN.pm

=item *

B<<< L<< CPAN::Debug >> >>> - Internal debugging for CPAN.pm

=item *

B<<< L<< CPAN::Distroprefs >> >>> - Read and match distroprefs

=item *

B<<< L<< CPAN::FirstTime >> >>> - Utility for CPAN::Config file Initialization

=item *

B<<< L<< CPAN::HandleConfig >> >>> - Internal configuration handling for CPAN.pm

=item *

B<<< L<< CPAN::Kwalify >> >>> - Interface between CPAN.pm and Kwalify.pm

=item *

B<<< L<< CPAN::Meta >> >>> - The distribution metadata for a CPAN dist

=item *

B<<< L<< CPAN::Meta::Converter >> >>> - Convert CPAN distribution metadata structures

=item *

B<<< L<< CPAN::Meta::Feature >> >>> - An optional feature provided by a CPAN distribution

=item *

B<<< L<< CPAN::Meta::History >> >>> - History of CPAN Meta Spec changes

=item *

B<<< L<< CPAN::Meta::History::Meta_1_0 >> >>> - Version 1.0 metadata specification for META.yml

=item *

B<<< L<< CPAN::Meta::History::Meta_1_1 >> >>> - Version 1.1 metadata specification for META.yml

=item *

B<<< L<< CPAN::Meta::History::Meta_1_2 >> >>> - Version 1.2 metadata specification for META.yml

=item *

B<<< L<< CPAN::Meta::History::Meta_1_3 >> >>> - Version 1.3 metadata specification for META.yml

=item *

B<<< L<< CPAN::Meta::History::Meta_1_4 >> >>> - Version 1.4 metadata specification for META.yml

=item *

B<<< L<< CPAN::Meta::Merge >> >>> - Merging CPAN Meta fragments

=item *

B<<< L<< CPAN::Meta::Prereqs >> >>> - A set of distribution prerequisites by phase and type

=item *

B<<< L<< CPAN::Meta::Requirements >> >>> - A set of version requirements for a CPAN dist

=item *

B<<< L<< CPAN::Meta::Spec >> >>> - Specification for CPAN distribution metadata

=item *

B<<< L<< CPAN::Meta::Validator >> >>> - Validate CPAN distribution metadata structures

=item *

B<<< L<< CPAN::Meta::YAML >> >>> - Read and write a subset of YAML for CPAN Meta files

=item *

B<<< L<< CPAN::Nox >> >>> - Wrapper around CPAN.pm without using any XS module

=item *

B<<< L<< CPAN::Plugin >> >>> - Base class for CPAN shell extensions

=item *

B<<< L<< CPAN::Plugin::Specfile >> >>> - Proof of concept implementation of a trivial CPAN::Plugin

=item *

B<<< L<< CPAN::Queue >> >>> - Internal queue support for CPAN.pm

=item *

B<<< L<< CPAN::Tarzip >> >>> - Internal handling of tar archives for CPAN.pm

=item *

B<<< L<< CPAN::Version >> >>> - Utility functions to compare CPAN versions

=item *

B<<< L<< Carp >> >>> - Alternative warn and die for modules

=item *

B<<< L<< Class::Struct >> >>> - Declare struct-like datatypes as Perl classes

=item *

B<<< L<< Compress::Raw::Bzip2 >> >>> - Low-Level Interface to bzip2 compression library

=item *

B<<< L<< Compress::Raw::Zlib >> >>> - Low-Level Interface to zlib compression library

=item *

B<<< L<< Compress::Zlib >> >>> - Interface to zlib compression library

=item *

B<<< L<< Config >> >>> - Access Perl configuration information

=item *

B<<< L<< Config::Extensions >> >>> - Hash lookup of which core extensions were built.

=item *

B<<< L<< Config::Perl::V >> >>> - Structured data retrieval of perl -V output

=item *

B<<< L<< Cwd >> >>> - Get pathname of current working directory

=item *

B<<< L<< DB >> >>> - Programmatic interface to the Perl debugging API

=item *

B<<< L<< DBM_Filter >> >>> - Filter DBM keys/values 

=item *

B<<< L<< DBM_Filter::compress >> >>> - Filter for DBM_Filter

=item *

B<<< L<< DBM_Filter::encode >> >>> - Filter for DBM_Filter

=item *

B<<< L<< DBM_Filter::int32 >> >>> - Filter for DBM_Filter

=item *

B<<< L<< DBM_Filter::null >> >>> - Filter for DBM_Filter

=item *

B<<< L<< DBM_Filter::utf8 >> >>> - Filter for DBM_Filter

=item *

B<<< L<< DB_File >> >>> - Perl5 access to Berkeley DB version 1.x

=item *

B<<< L<< Data::Dumper >> >>> - Stringified perl data structures, suitable for both printing and C<eval>

=item *

B<<< L<< Devel::PPPort >> >>> - Perl/Pollution/Portability

=item *

B<<< L<< Devel::Peek >> >>> - A data debugging tool for the XS programmer

=item *

B<<< L<< Devel::SelfStubber >> >>> - Generate stubs for a SelfLoading module

=item *

B<<< L<< Digest >> >>> - Modules that calculate message digests

=item *

B<<< L<< Digest::MD5 >> >>> - Perl interface to the MD5 Algorithm

=item *

B<<< L<< Digest::SHA >> >>> - Perl extension for SHA-1/224/256/384/512

=item *

B<<< L<< Digest::base >> >>> - Digest base class

=item *

B<<< L<< Digest::file >> >>> - Calculate digests of files

=item *

B<<< L<< DirHandle >> >>> - (obsolete) supply object methods for directory handles

=item *

B<<< L<< Dumpvalue >> >>> - Provides screen dump of Perl data.

=item *

B<<< L<< DynaLoader >> >>> - Dynamically load C libraries into Perl code

=item *

B<<< L<< Encode >> >>> - Character encodings in Perl

=item *

B<<< L<< Encode::Alias >> >>> - Alias definitions to encodings

=item *

B<<< L<< Encode::Byte >> >>> - Single Byte Encodings

=item *

B<<< L<< Encode::CJKConstants >> >>> - Internally used by Encode::??::ISO_2022_*

=item *

B<<< L<< Encode::CN >> >>> - China-based Chinese Encodings

=item *

B<<< L<< Encode::CN::HZ >> >>> - Internally used by Encode::CN

=item *

B<<< L<< Encode::Config >> >>> - Internally used by Encode

=item *

B<<< L<< Encode::EBCDIC >> >>> - EBCDIC Encodings

=item *

B<<< L<< Encode::Encoder >> >>> - Object Oriented Encoder

=item *

B<<< L<< Encode::Encoding >> >>> - Encode Implementation Base Class

=item *

B<<< L<< Encode::GSM0338 >> >>> - ETSI GSM 03.38 Encoding

=item *

B<<< L<< Encode::Guess >> >>> - Guesses encoding from data

=item *

B<<< L<< Encode::JP >> >>> - Japanese Encodings

=item *

B<<< L<< Encode::JP::H2Z >> >>> - Internally used by Encode::JP::2022_JP*

=item *

B<<< L<< Encode::JP::JIS7 >> >>> - Internally used by Encode::JP

=item *

B<<< L<< Encode::KR >> >>> - Korean Encodings

=item *

B<<< L<< Encode::KR::2022_KR >> >>> - Internally used by Encode::KR

=item *

B<<< L<< Encode::MIME::Header >> >>> - MIME encoding for an unstructured email header

=item *

B<<< L<< Encode::MIME::Name >> >>> - Internally used by Encode

=item *

B<<< L<< Encode::PerlIO >> >>> - A detailed document on Encode and PerlIO

=item *

B<<< L<< Encode::Supported >> >>> - Encodings supported by Encode

=item *

B<<< L<< Encode::Symbol >> >>> - Symbol Encodings

=item *

B<<< L<< Encode::TW >> >>> - Taiwan-based Chinese Encodings

=item *

B<<< L<< Encode::Unicode >> >>> - Various Unicode Transformation Formats

=item *

B<<< L<< Encode::Unicode::UTF7 >> >>> - UTF-7 encoding

=item *

B<<< L<< English >> >>> - Use nice English (or awk) names for ugly punctuation variables

=item *

B<<< L<< Env >> >>> - Perl module that imports environment variables as scalars or arrays

=item *

B<<< L<< Errno >> >>> - System errno constants

=item *

B<<< L<< Exporter >> >>> - Implements default import method for modules

=item *

B<<< L<< Exporter::Heavy >> >>> - Exporter guts

=item *

B<<< L<< ExtUtils::CBuilder >> >>> - Compile and link C code for Perl modules

=item *

B<<< L<< ExtUtils::CBuilder::Platform::Windows >> >>> - Builder class for Windows platforms

=item *

B<<< L<< ExtUtils::Command >> >>> - Utilities to replace common UNIX commands in Makefiles etc.

=item *

B<<< L<< ExtUtils::Command::MM >> >>> - Commands for the MM's to use in Makefiles

=item *

B<<< L<< ExtUtils::Constant >> >>> - Generate XS code to import C header constants

=item *

B<<< L<< ExtUtils::Constant::Base >> >>> - Base class for ExtUtils::Constant objects

=item *

B<<< L<< ExtUtils::Constant::Utils >> >>> - Helper functions for ExtUtils::Constant

=item *

B<<< L<< ExtUtils::Constant::XS >> >>> - Generate C code for XS modules' constants.

=item *

B<<< L<< ExtUtils::Embed >> >>> - Utilities for embedding Perl in C/C++ applications

=item *

B<<< L<< ExtUtils::Install >> >>> - Install files from here to there

=item *

B<<< L<< ExtUtils::Installed >> >>> - Inventory management of installed modules

=item *

B<<< L<< ExtUtils::Liblist >> >>> - Determine libraries to use and how to use them

=item *

B<<< L<< ExtUtils::MM >> >>> - OS adjusted ExtUtils::MakeMaker subclass

=item *

B<<< L<< ExtUtils::MM_AIX >> >>> - AIX specific subclass of ExtUtils::MM_Unix

=item *

B<<< L<< ExtUtils::MM_Any >> >>> - Platform-agnostic MM methods

=item *

B<<< L<< ExtUtils::MM_BeOS >> >>> - Methods to override UN*X behaviour in ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_Cygwin >> >>> - Methods to override UN*X behaviour in ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_DOS >> >>> - DOS specific subclass of ExtUtils::MM_Unix

=item *

B<<< L<< ExtUtils::MM_Darwin >> >>> - Special behaviors for OS X

=item *

B<<< L<< ExtUtils::MM_MacOS >> >>> - Once produced Makefiles for MacOS Classic

=item *

B<<< L<< ExtUtils::MM_NW5 >> >>> - Methods to override UN*X behaviour in ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_OS2 >> >>> - Methods to override UN*X behaviour in ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_OS390 >> >>> - OS390 specific subclass of ExtUtils::MM_Unix

=item *

B<<< L<< ExtUtils::MM_QNX >> >>> - QNX specific subclass of ExtUtils::MM_Unix

=item *

B<<< L<< ExtUtils::MM_UWIN >> >>> - U/WIN specific subclass of ExtUtils::MM_Unix

=item *

B<<< L<< ExtUtils::MM_Unix >> >>> - Methods used by ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_VMS >> >>> - Methods to override UN*X behaviour in ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_VOS >> >>> - VOS specific subclass of ExtUtils::MM_Unix

=item *

B<<< L<< ExtUtils::MM_Win32 >> >>> - Methods to override UN*X behaviour in ExtUtils::MakeMaker

=item *

B<<< L<< ExtUtils::MM_Win95 >> >>> - Method to customize MakeMaker for Win9X

=item *

B<<< L<< ExtUtils::MY >> >>> - ExtUtils::MakeMaker subclass for customization

=item *

B<<< L<< ExtUtils::MakeMaker >> >>> - Create a module Makefile

=item *

B<<< L<< ExtUtils::MakeMaker::Config >> >>> - Wrapper around Config.pm

=item *

B<<< L<< ExtUtils::MakeMaker::FAQ >> >>> - Frequently Asked Questions About MakeMaker

=item *

B<<< L<< ExtUtils::MakeMaker::Locale >> >>> - Bundled Encode::Locale

=item *

B<<< L<< ExtUtils::MakeMaker::Tutorial >> >>> - Writing a module with MakeMaker

=item *

B<<< L<< ExtUtils::Manifest >> >>> - Utilities to write and check a MANIFEST file

=item *

B<<< L<< ExtUtils::Miniperl >> >>> - Write the C code for miniperlmain.c and perlmain.c

=item *

B<<< L<< ExtUtils::Mkbootstrap >> >>> - Make a bootstrap file for use by DynaLoader

=item *

B<<< L<< ExtUtils::Mksymlists >> >>> - Write linker options files for dynamic extension

=item *

B<<< L<< ExtUtils::PL2Bat >> >>> - Batch file creation to run perl scripts on Windows

=item *

B<<< L<< ExtUtils::Packlist >> >>> - Manage .packlist files

=item *

B<<< L<< ExtUtils::ParseXS >> >>> - Converts Perl XS code into C code

=item *

B<<< L<< ExtUtils::ParseXS::Constants >> >>> - Initialization values for some globals

=item *

B<<< L<< ExtUtils::ParseXS::Eval >> >>> - Clean package to evaluate code in

=item *

B<<< L<< ExtUtils::ParseXS::Utilities >> >>> - Subroutines used with ExtUtils::ParseXS

=item *

B<<< L<< ExtUtils::Typemaps >> >>> - Read/Write/Modify Perl/XS typemap files

=item *

B<<< L<< ExtUtils::Typemaps::Cmd >> >>> - Quick commands for handling typemaps

=item *

B<<< L<< ExtUtils::Typemaps::InputMap >> >>> - Entry in the INPUT section of a typemap

=item *

B<<< L<< ExtUtils::Typemaps::OutputMap >> >>> - Entry in the OUTPUT section of a typemap

=item *

B<<< L<< ExtUtils::Typemaps::Type >> >>> - Entry in the TYPEMAP section of a typemap

=item *

B<<< L<< ExtUtils::XSSymSet >> >>> - Keep sets of symbol names palatable to the VMS linker

=item *

B<<< L<< ExtUtils::testlib >> >>> - Add blib/* directories to @INC

=item *

B<<< L<< Fatal >> >>> - Replace functions with equivalents which succeed or die

=item *

B<<< L<< Fcntl >> >>> - Load the C Fcntl.h defines

=item *

B<<< L<< File::Basename >> >>> - Parse file paths into directory, filename and suffix.

=item *

B<<< L<< File::Compare >> >>> - Compare files or filehandles

=item *

B<<< L<< File::Copy >> >>> - Copy files or filehandles

=item *

B<<< L<< File::DosGlob >> >>> - DOS like globbing and then some

=item *

B<<< L<< File::Fetch >> >>> - A generic file fetching mechanism

=item *

B<<< L<< File::Find >> >>> - Traverse a directory tree.

=item *

B<<< L<< File::Glob >> >>> - Perl extension for BSD glob routine

=item *

B<<< L<< File::GlobMapper >> >>> - Extend File Glob to Allow Input and Output Files

=item *

B<<< L<< File::Path >> >>> - Create or remove directory trees

=item *

B<<< L<< File::Spec >> >>> - Portably perform operations on file names

=item *

B<<< L<< File::Spec::AmigaOS >> >>> - File::Spec for AmigaOS

=item *

B<<< L<< File::Spec::Cygwin >> >>> - Methods for Cygwin file specs

=item *

B<<< L<< File::Spec::Epoc >> >>> - Methods for Epoc file specs

=item *

B<<< L<< File::Spec::Functions >> >>> - Portably perform operations on file names

=item *

B<<< L<< File::Spec::Mac >> >>> - File::Spec for Mac OS (Classic)

=item *

B<<< L<< File::Spec::OS2 >> >>> - Methods for OS/2 file specs

=item *

B<<< L<< File::Spec::Unix >> >>> - File::Spec for Unix, base for other File::Spec modules

=item *

B<<< L<< File::Spec::VMS >> >>> - Methods for VMS file specs

=item *

B<<< L<< File::Spec::Win32 >> >>> - Methods for Win32 file specs

=item *

B<<< L<< File::Temp >> >>> - Return name and handle of a temporary file safely

=item *

B<<< L<< File::stat >> >>> - By-name interface to Perl's built-in stat() functions

=item *

B<<< L<< FileCache >> >>> - Keep more files open than the system permits

=item *

B<<< L<< FileHandle >> >>> - Supply object methods for filehandles

=item *

B<<< L<< Filter::Simple >> >>> - Simplified source filtering

=item *

B<<< L<< Filter::Util::Call >> >>> - Perl Source Filter Utility Module

=item *

B<<< L<< FindBin >> >>> - Locate directory of original perl script

=item *

B<<< L<< GDBM_File >> >>> - Perl5 access to the gdbm library.

=item *

B<<< L<< Getopt::Long >> >>> - Extended processing of command line options

=item *

B<<< L<< Getopt::Std >> >>> - Process single-character switches with switch clustering

=item *

B<<< L<< HTTP::Tiny >> >>> - A small, simple, correct HTTP/1.1 client

=item *

B<<< L<< Hash::Util >> >>> - A selection of general-utility hash subroutines

=item *

B<<< L<< Hash::Util::FieldHash >> >>> - Support for Inside-Out Classes

=item *

B<<< L<< I18N::Collate >> >>> - Compare 8-bit scalar data according to the current locale

=item *

B<<< L<< I18N::LangTags >> >>> - Functions for dealing with RFC3066-style language tags

=item *

B<<< L<< I18N::LangTags::Detect >> >>> - Detect the user's language preferences

=item *

B<<< L<< I18N::LangTags::List >> >>> - Tags and names for human languages

=item *

B<<< L<< I18N::Langinfo >> >>> - Query locale information

=item *

B<<< L<< IO >> >>> - Load various IO modules

=item *

B<<< L<< IO::Compress::Base >> >>> - Base Class for IO::Compress modules

=item *

B<<< L<< IO::Compress::Bzip2 >> >>> - Write bzip2 files/buffers

=item *

B<<< L<< IO::Compress::Deflate >> >>> - Write RFC 1950 files/buffers

=item *

B<<< L<< IO::Compress::FAQ >> >>> - Frequently Asked Questions about IO::Compress

=item *

B<<< L<< IO::Compress::Gzip >> >>> - Write RFC 1952 files/buffers

=item *

B<<< L<< IO::Compress::RawDeflate >> >>> - Write RFC 1951 files/buffers

=item *

B<<< L<< IO::Compress::Zip >> >>> - Write zip files/buffers

=item *

B<<< L<< IO::Dir >> >>> - Supply object methods for directory handles

=item *

B<<< L<< IO::File >> >>> - Supply object methods for filehandles

=item *

B<<< L<< IO::Handle >> >>> - Supply object methods for I/O handles

=item *

B<<< L<< IO::Pipe >> >>> - Supply object methods for pipes

=item *

B<<< L<< IO::Poll >> >>> - Object interface to system poll call

=item *

B<<< L<< IO::Seekable >> >>> - Supply seek based methods for I/O objects

=item *

B<<< L<< IO::Select >> >>> - OO interface to the select system call

=item *

B<<< L<< IO::Socket >> >>> - Object interface to socket communications

=item *

B<<< L<< IO::Socket::INET >> >>> - Object interface for AF_INET domain sockets

=item *

B<<< L<< IO::Socket::UNIX >> >>> - Object interface for AF_UNIX domain sockets

=item *

B<<< L<< IO::Uncompress::AnyInflate >> >>> - Uncompress zlib-based (zip, gzip) file/buffer

=item *

B<<< L<< IO::Uncompress::AnyUncompress >> >>> - Uncompress gzip, zip, bzip2, zstd, xz, lzma, lzip, lzf or lzop file/buffer

=item *

B<<< L<< IO::Uncompress::Base >> >>> - Base Class for IO::Uncompress modules

=item *

B<<< L<< IO::Uncompress::Bunzip2 >> >>> - Read bzip2 files/buffers

=item *

B<<< L<< IO::Uncompress::Gunzip >> >>> - Read RFC 1952 files/buffers

=item *

B<<< L<< IO::Uncompress::Inflate >> >>> - Read RFC 1950 files/buffers

=item *

B<<< L<< IO::Uncompress::RawInflate >> >>> - Read RFC 1951 files/buffers

=item *

B<<< L<< IO::Uncompress::Unzip >> >>> - Read zip files/buffers

=item *

B<<< L<< IO::Zlib >> >>> - IO:: style interface to L<Compress::Zlib>

=item *

B<<< L<< IPC::Cmd >> >>> - Finding and running system commands made easy

=item *

B<<< L<< IPC::Msg >> >>> - SysV Msg IPC object class

=item *

B<<< L<< IPC::Open2 >> >>> - Open a process for both reading and writing using open2()

=item *

B<<< L<< IPC::Open3 >> >>> - Open a process for reading, writing, and error handling using open3()

=item *

B<<< L<< IPC::Semaphore >> >>> - SysV Semaphore IPC object class

=item *

B<<< L<< IPC::SharedMem >> >>> - SysV Shared Memory IPC object class

=item *

B<<< L<< IPC::SysV >> >>> - System V IPC constants and system calls

=item *

B<<< L<< Internals >> >>> - Reserved special namespace for internals related functions

=item *

B<<< L<< JSON::PP >> >>> - JSON::XS compatible pure-Perl module.

=item *

B<<< L<< JSON::PP::Boolean >> >>> - Dummy module providing JSON::PP::Boolean

=item *

B<<< L<< List::Util >> >>> - A selection of general-utility list subroutines

=item *

B<<< L<< List::Util::XS >> >>> - Indicate if List::Util was compiled with a C compiler

=item *

B<<< L<< Locale::Maketext >> >>> - Framework for localization

=item *

B<<< L<< Locale::Maketext::Cookbook >> >>> - Recipes for using Locale::Maketext

=item *

B<<< L<< Locale::Maketext::Guts >> >>> - Deprecated module to load Locale::Maketext utf8 code

=item *

B<<< L<< Locale::Maketext::GutsLoader >> >>> - Deprecated module to load Locale::Maketext utf8 code

=item *

B<<< L<< Locale::Maketext::Simple >> >>> - Simple interface to Locale::Maketext::Lexicon

=item *

B<<< L<< Locale::Maketext::TPJ13 >> >>> - Article about software localization

=item *

B<<< L<< MIME::Base64 >> >>> - Encoding and decoding of base64 strings

=item *

B<<< L<< MIME::QuotedPrint >> >>> - Encoding and decoding of quoted-printable strings

=item *

B<<< L<< Math::BigFloat >> >>> - Arbitrary size floating point math package

=item *

B<<< L<< Math::BigInt >> >>> - Arbitrary size integer/float math package

=item *

B<<< L<< Math::BigInt::Calc >> >>> - Pure Perl module to support Math::BigInt

=item *

B<<< L<< Math::BigInt::FastCalc >> >>> - Math::BigInt::Calc with some XS for more speed

=item *

B<<< L<< Math::BigInt::Lib >> >>> - Virtual parent class for Math::BigInt libraries

=item *

B<<< L<< Math::BigRat >> >>> - Arbitrary big rational numbers

=item *

B<<< L<< Math::Complex >> >>> - Complex numbers and associated mathematical functions

=item *

B<<< L<< Math::Trig >> >>> - Trigonometric functions

=item *

B<<< L<< Memoize >> >>> - Make functions faster by trading space for time

=item *

B<<< L<< Memoize::AnyDBM_File >> >>> - Glue to provide EXISTS for AnyDBM_File for Storable use

=item *

B<<< L<< Memoize::Expire >> >>> - Plug-in module for automatic expiration of memoized values

=item *

B<<< L<< Memoize::ExpireFile >> >>> - Test for Memoize expiration semantics

=item *

B<<< L<< Memoize::ExpireTest >> >>> - Test for Memoize expiration semantics

=item *

B<<< L<< Memoize::NDBM_File >> >>> - Glue to provide EXISTS for NDBM_File for Storable use

=item *

B<<< L<< Memoize::SDBM_File >> >>> - Glue to provide EXISTS for SDBM_File for Storable use

=item *

B<<< L<< Memoize::Storable >> >>> - Store Memoized data in Storable database

=item *

B<<< L<< Module::CoreList >> >>> - What modules shipped with versions of perl

=item *

B<<< L<< Module::CoreList::Utils >> >>> - What utilities shipped with versions of perl

=item *

B<<< L<< Module::Load >> >>> - Runtime require of both modules and files

=item *

B<<< L<< Module::Load::Conditional >> >>> - Looking up module information / loading at runtime

=item *

B<<< L<< Module::Loaded >> >>> - Mark modules as loaded or unloaded

=item *

B<<< L<< Module::Metadata >> >>> - Gather package and POD information from perl module files

=item *

B<<< L<< NDBM_File >> >>> - Tied access to ndbm files

=item *

B<<< L<< NEXT >> >>> - Provide a pseudo-class NEXT (et al) that allows method redispatch

=item *

B<<< L<< Net::Cmd >> >>> - Network Command class (as used by FTP, SMTP etc)

=item *

B<<< L<< Net::Config >> >>> - Local configuration data for libnet

=item *

B<<< L<< Net::Domain >> >>> - Attempt to evaluate the current host's internet name and domain

=item *

B<<< L<< Net::FTP >> >>> - FTP Client class

=item *

B<<< L<< Net::FTP::dataconn >> >>> - FTP Client data connection class

=item *

B<<< L<< Net::NNTP >> >>> - NNTP Client class

=item *

B<<< L<< Net::Netrc >> >>> - OO interface to users netrc file

=item *

B<<< L<< Net::POP3 >> >>> - Post Office Protocol 3 Client class (RFC1939)

=item *

B<<< L<< Net::Ping >> >>> - Check a remote host for reachability

=item *

B<<< L<< Net::SMTP >> >>> - Simple Mail Transfer Protocol Client

=item *

B<<< L<< Net::Time >> >>> - Time and daytime network client interface

=item *

B<<< L<< Net::hostent >> >>> - By-name interface to Perl's built-in gethost*() functions

=item *

B<<< L<< Net::libnetFAQ >> >>> - Libnet Frequently Asked Questions

=item *

B<<< L<< Net::netent >> >>> - By-name interface to Perl's built-in getnet*() functions

=item *

B<<< L<< Net::protoent >> >>> - By-name interface to Perl's built-in getproto*() functions

=item *

B<<< L<< Net::servent >> >>> - By-name interface to Perl's built-in getserv*() functions

=item *

B<<< L<< O >> >>> - Generic interface to Perl Compiler backends

=item *

B<<< L<< ODBM_File >> >>> - Tied access to odbm files

=item *

B<<< L<< Opcode >> >>> - Disable named opcodes when compiling perl code

=item *

B<<< L<< POSIX >> >>> - Perl interface to IEEE Std 1003.1

=item *

B<<< L<< Params::Check >> >>> - A generic input parsing/checking mechanism.

=item *

B<<< L<< Parse::CPAN::Meta >> >>> - Parse META.yml and META.json CPAN metadata files

=item *

B<<< L<< Perl::OSType >> >>> - Map Perl operating system names to generic types

=item *

B<<< L<< PerlIO >> >>> - On demand loader for PerlIO layers and root of PerlIO::* name space

=item *

B<<< L<< PerlIO::encoding >> >>> - Encoding layer

=item *

B<<< L<< PerlIO::mmap >> >>> - Memory mapped IO

=item *

B<<< L<< PerlIO::scalar >> >>> - In-memory IO, scalar IO

=item *

B<<< L<< PerlIO::via >> >>> - Helper class for PerlIO layers implemented in perl

=item *

B<<< L<< PerlIO::via::QuotedPrint >> >>> - PerlIO layer for quoted-printable strings

=item *

B<<< L<< Pod::Checker >> >>> - Check pod documents for syntax errors

=item *

B<<< L<< Pod::Escapes >> >>> - For resolving Pod EE<lt>...E<gt> sequences

=item *

B<<< L<< Pod::Functions >> >>> - Group Perl's functions a la perlfunc.pod

=item *

B<<< L<< Pod::Html >> >>> - Module to convert pod files to HTML

=item *

B<<< L<< Pod::Man >> >>> - Convert POD data to formatted *roff input

=item *

B<<< L<< Pod::ParseLink >> >>> - Parse an LE<lt>E<gt> formatting code in POD text

=item *

B<<< L<< Pod::Perldoc >> >>> - Look up Perl documentation in Pod format.

=item *

B<<< L<< Pod::Perldoc::BaseTo >> >>> - Base for Pod::Perldoc formatters

=item *

B<<< L<< Pod::Perldoc::GetOptsOO >> >>> - Customized option parser for Pod::Perldoc

=item *

B<<< L<< Pod::Perldoc::ToANSI >> >>> - Render Pod with ANSI color escapes 

=item *

B<<< L<< Pod::Perldoc::ToChecker >> >>> - Let Perldoc check Pod for errors

=item *

B<<< L<< Pod::Perldoc::ToMan >> >>> - Let Perldoc render Pod as man pages

=item *

B<<< L<< Pod::Perldoc::ToNroff >> >>> - Let Perldoc convert Pod to nroff

=item *

B<<< L<< Pod::Perldoc::ToPod >> >>> - Let Perldoc render Pod as ... Pod!

=item *

B<<< L<< Pod::Perldoc::ToRtf >> >>> - Let Perldoc render Pod as RTF

=item *

B<<< L<< Pod::Perldoc::ToTerm >> >>> - Render Pod with terminal escapes

=item *

B<<< L<< Pod::Perldoc::ToText >> >>> - Let Perldoc render Pod as plaintext

=item *

B<<< L<< Pod::Perldoc::ToTk >> >>> - Let Perldoc use Tk::Pod to render Pod

=item *

B<<< L<< Pod::Perldoc::ToXml >> >>> - Let Perldoc render Pod as XML

=item *

B<<< L<< Pod::Simple >> >>> - Framework for parsing Pod

=item *

B<<< L<< Pod::Simple::Checker >> >>> - Check the Pod syntax of a document

=item *

B<<< L<< Pod::Simple::Debug >> >>> - Put Pod::Simple into trace/debug mode

=item *

B<<< L<< Pod::Simple::DumpAsText >> >>> - Dump Pod-parsing events as text

=item *

B<<< L<< Pod::Simple::DumpAsXML >> >>> - Turn Pod into XML

=item *

B<<< L<< Pod::Simple::HTML >> >>> - Convert Pod to HTML

=item *

B<<< L<< Pod::Simple::HTMLBatch >> >>> - Convert several Pod files to several HTML files

=item *

B<<< L<< Pod::Simple::JustPod >> >>> - Just the Pod, the whole Pod, and nothing but the Pod

=item *

B<<< L<< Pod::Simple::LinkSection >> >>> - Represent "section" attributes of L codes

=item *

B<<< L<< Pod::Simple::Methody >> >>> - Turn Pod::Simple events into method calls

=item *

B<<< L<< Pod::Simple::PullParser >> >>> - A pull-parser interface to parsing Pod

=item *

B<<< L<< Pod::Simple::PullParserEndToken >> >>> - End-tokens from Pod::Simple::PullParser

=item *

B<<< L<< Pod::Simple::PullParserStartToken >> >>> - Start-tokens from Pod::Simple::PullParser

=item *

B<<< L<< Pod::Simple::PullParserTextToken >> >>> - Text-tokens from Pod::Simple::PullParser

=item *

B<<< L<< Pod::Simple::PullParserToken >> >>> - Tokens from Pod::Simple::PullParser

=item *

B<<< L<< Pod::Simple::RTF >> >>> - Format Pod as RTF

=item *

B<<< L<< Pod::Simple::Search >> >>> - Find POD documents in directory trees

=item *

B<<< L<< Pod::Simple::SimpleTree >> >>> - Parse Pod into a simple parse tree 

=item *

B<<< L<< Pod::Simple::Subclassing >> >>> - Write a formatter as a Pod::Simple subclass

=item *

B<<< L<< Pod::Simple::Text >> >>> - Format Pod as plaintext

=item *

B<<< L<< Pod::Simple::TextContent >> >>> - Get the text content of Pod

=item *

B<<< L<< Pod::Simple::XHTML >> >>> - Format Pod as validating XHTML

=item *

B<<< L<< Pod::Simple::XMLOutStream >> >>> - Turn Pod into XML

=item *

B<<< L<< Pod::Text >> >>> - Convert POD data to formatted text

=item *

B<<< L<< Pod::Text::Color >> >>> - Convert POD data to formatted color ASCII text

=item *

B<<< L<< Pod::Text::Overstrike >> >>> - Convert POD data to formatted overstrike text

=item *

B<<< L<< Pod::Text::Termcap >> >>> - Convert POD data to ASCII text with format escapes

=item *

B<<< L<< Pod::Usage >> >>> - Extracts POD documentation and shows usage information

=item *

B<<< L<< SDBM_File >> >>> - Tied access to sdbm files

=item *

B<<< L<< Safe >> >>> - Compile and execute code in restricted compartments

=item *

B<<< L<< Scalar::Util >> >>> - A selection of general-utility scalar subroutines

=item *

B<<< L<< Search::Dict >> >>> - Look - search for key in dictionary file

=item *

B<<< L<< SelectSaver >> >>> - Save and restore selected file handle

=item *

B<<< L<< SelfLoader >> >>> - Load functions only on demand

=item *

B<<< L<< Storable >> >>> - Persistence for Perl data structures

=item *

B<<< L<< Sub::Util >> >>> - A selection of utility subroutines for subs and CODE references

=item *

B<<< L<< Symbol >> >>> - Manipulate Perl symbols and their names

=item *

B<<< L<< Sys::Hostname >> >>> - Try every conceivable way to get hostname

=item *

B<<< L<< Sys::Syslog >> >>> - Perl interface to the UNIX syslog(3) calls

=item *

B<<< L<< Sys::Syslog::Win32 >> >>> - Win32 support for Sys::Syslog

=item *

B<<< L<< TAP::Base >> >>> - Base class that provides common functionality to L<TAP::Parser>

=item *

B<<< L<< TAP::Formatter::Base >> >>> - Base class for harness output delegates

=item *

B<<< L<< TAP::Formatter::Color >> >>> - Run Perl test scripts with color

=item *

B<<< L<< TAP::Formatter::Console >> >>> - Harness output delegate for default console output

=item *

B<<< L<< TAP::Formatter::Console::ParallelSession >> >>> - Harness output delegate for parallel console output

=item *

B<<< L<< TAP::Formatter::Console::Session >> >>> - Harness output delegate for default console output

=item *

B<<< L<< TAP::Formatter::File >> >>> - Harness output delegate for file output

=item *

B<<< L<< TAP::Formatter::File::Session >> >>> - Harness output delegate for file output

=item *

B<<< L<< TAP::Formatter::Session >> >>> - Abstract base class for harness output delegate 

=item *

B<<< L<< TAP::Harness >> >>> - Run test scripts with statistics

=item *

B<<< L<< TAP::Harness::Env >> >>> - Parsing harness related environmental variables where appropriate

=item *

B<<< L<< TAP::Object >> >>> - Base class that provides common functionality to all C<TAP::*> modules

=item *

B<<< L<< TAP::Parser >> >>> - Parse L<TAP|Test::Harness::TAP> output

=item *

B<<< L<< TAP::Parser::Aggregator >> >>> - Aggregate TAP::Parser results

=item *

B<<< L<< TAP::Parser::Grammar >> >>> - A grammar for the Test Anything Protocol.

=item *

B<<< L<< TAP::Parser::Iterator >> >>> - Base class for TAP source iterators

=item *

B<<< L<< TAP::Parser::Iterator::Array >> >>> - Iterator for array-based TAP sources

=item *

B<<< L<< TAP::Parser::Iterator::Process >> >>> - Iterator for process-based TAP sources

=item *

B<<< L<< TAP::Parser::Iterator::Stream >> >>> - Iterator for filehandle-based TAP sources

=item *

B<<< L<< TAP::Parser::IteratorFactory >> >>> - Figures out which SourceHandler objects to use for a given Source

=item *

B<<< L<< TAP::Parser::Multiplexer >> >>> - Multiplex multiple TAP::Parsers

=item *

B<<< L<< TAP::Parser::Result >> >>> - Base class for TAP::Parser output objects

=item *

B<<< L<< TAP::Parser::Result::Bailout >> >>> - Bailout result token.

=item *

B<<< L<< TAP::Parser::Result::Comment >> >>> - Comment result token.

=item *

B<<< L<< TAP::Parser::Result::Plan >> >>> - Plan result token.

=item *

B<<< L<< TAP::Parser::Result::Pragma >> >>> - TAP pragma token.

=item *

B<<< L<< TAP::Parser::Result::Test >> >>> - Test result token.

=item *

B<<< L<< TAP::Parser::Result::Unknown >> >>> - Unknown result token.

=item *

B<<< L<< TAP::Parser::Result::Version >> >>> - TAP syntax version token.

=item *

B<<< L<< TAP::Parser::Result::YAML >> >>> - YAML result token.

=item *

B<<< L<< TAP::Parser::ResultFactory >> >>> - Factory for creating TAP::Parser output objects

=item *

B<<< L<< TAP::Parser::Scheduler >> >>> - Schedule tests during parallel testing

=item *

B<<< L<< TAP::Parser::Scheduler::Job >> >>> - A single testing job.

=item *

B<<< L<< TAP::Parser::Scheduler::Spinner >> >>> - A no-op job.

=item *

B<<< L<< TAP::Parser::Source >> >>> - A TAP source & meta data about it

=item *

B<<< L<< TAP::Parser::SourceHandler >> >>> - Base class for different TAP source handlers

=item *

B<<< L<< TAP::Parser::SourceHandler::Executable >> >>> - Stream output from an executable TAP source

=item *

B<<< L<< TAP::Parser::SourceHandler::File >> >>> - Stream TAP from a text file.

=item *

B<<< L<< TAP::Parser::SourceHandler::Handle >> >>> - Stream TAP from an IO::Handle or a GLOB.

=item *

B<<< L<< TAP::Parser::SourceHandler::Perl >> >>> - Stream TAP from a Perl executable

=item *

B<<< L<< TAP::Parser::SourceHandler::RawTAP >> >>> - Stream output from raw TAP in a scalar/array ref.

=item *

B<<< L<< TAP::Parser::YAMLish::Reader >> >>> - Read YAMLish data from iterator

=item *

B<<< L<< TAP::Parser::YAMLish::Writer >> >>> - Write YAMLish data

=item *

B<<< L<< Term::ANSIColor >> >>> - Color screen output using ANSI escape sequences

=item *

B<<< L<< Term::Cap >> >>> - Perl termcap interface

=item *

B<<< L<< Term::Complete >> >>> - Perl word completion module

=item *

B<<< L<< Term::ReadLine >> >>> - Perl interface to various C<readline> packages.

=item *

B<<< L<< Test >> >>> - Provides a simple framework for writing test scripts

=item *

B<<< L<< Test2 >> >>> - Framework for writing test tools that all work together.

=item *

B<<< L<< Test2::API >> >>> - Primary interface for writing Test2 based testing tools.

=item *

B<<< L<< Test2::API::Breakage >> >>> - What breaks at what version

=item *

B<<< L<< Test2::API::Context >> >>> - Object to represent a testing context.

=item *

B<<< L<< Test2::API::Instance >> >>> - Object used by Test2::API under the hood

=item *

B<<< L<< Test2::API::InterceptResult >> >>> - Representation of a list of events.

=item *

B<<< L<< Test2::API::InterceptResult::Event >> >>> - Representation of an event for use in

=item *

B<<< L<< Test2::API::InterceptResult::Hub >> >>> - Hub used by InterceptResult.

=item *

B<<< L<< Test2::API::InterceptResult::Squasher >> >>> - Encapsulation of the algorithm that

=item *

B<<< L<< Test2::API::Stack >> >>> - Object to manage a stack of L<Test2::Hub>

=item *

B<<< L<< Test2::Event >> >>> - Base class for events

=item *

B<<< L<< Test2::Event::Bail >> >>> - Bailout!

=item *

B<<< L<< Test2::Event::Diag >> >>> - Diag event type

=item *

B<<< L<< Test2::Event::Encoding >> >>> - Set the encoding for the output stream

=item *

B<<< L<< Test2::Event::Exception >> >>> - Exception event

=item *

B<<< L<< Test2::Event::Fail >> >>> - Event for a simple failed assertion

=item *

B<<< L<< Test2::Event::Generic >> >>> - Generic event type.

=item *

B<<< L<< Test2::Event::Note >> >>> - Note event type

=item *

B<<< L<< Test2::Event::Ok >> >>> - Ok event type

=item *

B<<< L<< Test2::Event::Pass >> >>> - Event for a simple passing assertion

=item *

B<<< L<< Test2::Event::Plan >> >>> - The event of a plan

=item *

B<<< L<< Test2::Event::Skip >> >>> - Skip event type

=item *

B<<< L<< Test2::Event::Subtest >> >>> - Event for subtest types

=item *

B<<< L<< Test2::Event::TAP::Version >> >>> - Event for TAP version.

=item *

B<<< L<< Test2::Event::V2 >> >>> - Second generation event.

=item *

B<<< L<< Test2::Event::Waiting >> >>> - Tell all procs/threads it is time to be done

=item *

B<<< L<< Test2::EventFacet >> >>> - Base class for all event facets.

=item *

B<<< L<< Test2::EventFacet::About >> >>> - Facet with event details.

=item *

B<<< L<< Test2::EventFacet::Amnesty >> >>> - Facet for assertion amnesty.

=item *

B<<< L<< Test2::EventFacet::Assert >> >>> - Facet representing an assertion.

=item *

B<<< L<< Test2::EventFacet::Control >> >>> - Facet for hub actions and behaviors.

=item *

B<<< L<< Test2::EventFacet::Error >> >>> - Facet for errors that need to be shown.

=item *

B<<< L<< Test2::EventFacet::Hub >> >>> - Facet for the hubs an event passes through.

=item *

B<<< L<< Test2::EventFacet::Info >> >>> - Facet for information a developer might care about.

=item *

B<<< L<< Test2::EventFacet::Info::Table >> >>> - Intermediary representation of a table.

=item *

B<<< L<< Test2::EventFacet::Meta >> >>> - Facet for meta-data

=item *

B<<< L<< Test2::EventFacet::Parent >> >>> - Facet for events contains other events

=item *

B<<< L<< Test2::EventFacet::Plan >> >>> - Facet for setting the plan

=item *

B<<< L<< Test2::EventFacet::Render >> >>> - Facet that dictates how to render an event.

=item *

B<<< L<< Test2::EventFacet::Trace >> >>> - Debug information for events

=item *

B<<< L<< Test2::Formatter >> >>> - Namespace for formatters.

=item *

B<<< L<< Test2::Formatter::TAP >> >>> - Standard TAP formatter

=item *

B<<< L<< Test2::Hub >> >>> - The conduit through which all events flow.

=item *

B<<< L<< Test2::Hub::Interceptor >> >>> - Hub used by interceptor to grab results.

=item *

B<<< L<< Test2::Hub::Interceptor::Terminator >> >>> - Exception class used by

=item *

B<<< L<< Test2::Hub::Subtest >> >>> - Hub used by subtests

=item *

B<<< L<< Test2::IPC >> >>> - Turn on IPC for threading or forking support.

=item *

B<<< L<< Test2::IPC::Driver >> >>> - Base class for Test2 IPC drivers.

=item *

B<<< L<< Test2::IPC::Driver::Files >> >>> - Temp dir + Files concurrency model.

=item *

B<<< L<< Test2::Tools::Tiny >> >>> - Tiny set of tools for unfortunate souls who cannot use

=item *

B<<< L<< Test2::Transition >> >>> - Transition notes when upgrading to Test2

=item *

B<<< L<< Test2::Util >> >>> - Tools used by Test2 and friends.

=item *

B<<< L<< Test2::Util::ExternalMeta >> >>> - Allow third party tools to safely attach meta-data

=item *

B<<< L<< Test2::Util::Facets2Legacy >> >>> - Convert facet data to the legacy event API.

=item *

B<<< L<< Test2::Util::HashBase >> >>> - Build hash based classes.

=item *

B<<< L<< Test2::Util::Trace >> >>> - Legacy wrapper fro L<Test2::EventFacet::Trace>.

=item *

B<<< L<< Test::Builder >> >>> - Backend for building test libraries

=item *

B<<< L<< Test::Builder::Formatter >> >>> - Test::Builder subclass of Test2::Formatter::TAP

=item *

B<<< L<< Test::Builder::IO::Scalar >> >>> - A copy of IO::Scalar for Test::Builder

=item *

B<<< L<< Test::Builder::Module >> >>> - Base class for test modules

=item *

B<<< L<< Test::Builder::Tester >> >>> - Test testsuites that have been built with

=item *

B<<< L<< Test::Builder::Tester::Color >> >>> - Turn on colour in Test::Builder::Tester

=item *

B<<< L<< Test::Builder::TodoDiag >> >>> - Test::Builder subclass of Test2::Event::Diag

=item *

B<<< L<< Test::Harness >> >>> - Run Perl standard test scripts with statistics

=item *

B<<< L<< Test::Harness::Beyond >> >>> - Beyond make test

=item *

B<<< L<< Test::More >> >>> - Yet another framework for writing test scripts

=item *

B<<< L<< Test::Simple >> >>> - Basic utilities for writing tests.

=item *

B<<< L<< Test::Tester >> >>> - Ease testing test modules built with Test::Builder

=item *

B<<< L<< Test::Tester::Capture >> >>> - Help testing test modules built with Test::Builder

=item *

B<<< L<< Test::Tester::CaptureRunner >> >>> - Help testing test modules built with Test::Builder

=item *

B<<< L<< Test::Tutorial >> >>> - A tutorial about writing really basic tests

=item *

B<<< L<< Test::use::ok >> >>> - Alternative to Test::More::use_ok

=item *

B<<< L<< Text::Abbrev >> >>> - Abbrev - create an abbreviation table from a list

=item *

B<<< L<< Text::Balanced >> >>> - Extract delimited text sequences from strings.

=item *

B<<< L<< Text::ParseWords >> >>> - Parse text into an array of tokens or array of arrays

=item *

B<<< L<< Text::Tabs >> >>> - Expand and unexpand tabs like unix expand(1) and unexpand(1)

=item *

B<<< L<< Text::Wrap >> >>> - Line wrapping to form simple paragraphs

=item *

B<<< L<< Thread >> >>> - Manipulate threads in Perl (for old code only)

=item *

B<<< L<< Thread::Queue >> >>> - Thread-safe queues

=item *

B<<< L<< Thread::Semaphore >> >>> - Thread-safe semaphores

=item *

B<<< L<< Tie::Array >> >>> - Base class for tied arrays

=item *

B<<< L<< Tie::File >> >>> - Access the lines of a disk file via a Perl array

=item *

B<<< L<< Tie::Handle >> >>> - Base class definitions for tied handles

=item *

B<<< L<< Tie::Hash >> >>> - Base class definitions for tied hashes

=item *

B<<< L<< Tie::Hash::NamedCapture >> >>> - Named regexp capture buffers

=item *

B<<< L<< Tie::Memoize >> >>> - Add data to hash when needed

=item *

B<<< L<< Tie::RefHash >> >>> - Use references as hash keys

=item *

B<<< L<< Tie::Scalar >> >>> - Base class definitions for tied scalars

=item *

B<<< L<< Tie::StdHandle >> >>> - Base class definitions for tied handles

=item *

B<<< L<< Tie::SubstrHash >> >>> - Fixed-table-size, fixed-key-length hashing

=item *

B<<< L<< Time::HiRes >> >>> - High resolution alarm, sleep, gettimeofday, interval timers

=item *

B<<< L<< Time::Local >> >>> - Efficiently compute time from local and GMT time

=item *

B<<< L<< Time::Piece >> >>> - Object Oriented time objects

=item *

B<<< L<< Time::Seconds >> >>> - A simple API to convert seconds to other date values

=item *

B<<< L<< Time::gmtime >> >>> - By-name interface to Perl's built-in gmtime() function

=item *

B<<< L<< Time::localtime >> >>> - By-name interface to Perl's built-in localtime() function

=item *

B<<< L<< Time::tm >> >>> - Internal object used by Time::gmtime and Time::localtime

=item *

B<<< L<< UNIVERSAL >> >>> - Base class for ALL classes (blessed references)

=item *

B<<< L<< Unicode::Collate >> >>> - Unicode Collation Algorithm

=item *

B<<< L<< Unicode::Collate::CJK::Big5 >> >>> - Weighting CJK Unified Ideographs

=item *

B<<< L<< Unicode::Collate::CJK::GB2312 >> >>> - Weighting CJK Unified Ideographs

=item *

B<<< L<< Unicode::Collate::CJK::JISX0208 >> >>> - Weighting JIS KANJI for Unicode::Collate

=item *

B<<< L<< Unicode::Collate::CJK::Korean >> >>> - Weighting CJK Unified Ideographs

=item *

B<<< L<< Unicode::Collate::CJK::Pinyin >> >>> - Weighting CJK Unified Ideographs

=item *

B<<< L<< Unicode::Collate::CJK::Stroke >> >>> - Weighting CJK Unified Ideographs

=item *

B<<< L<< Unicode::Collate::CJK::Zhuyin >> >>> - Weighting CJK Unified Ideographs

=item *

B<<< L<< Unicode::Collate::Locale >> >>> - Linguistic tailoring for DUCET via Unicode::Collate

=item *

B<<< L<< Unicode::Normalize >> >>> - Unicode Normalization Forms

=item *

B<<< L<< Unicode::UCD >> >>> - Unicode character database

=item *

B<<< L<< User::grent >> >>> - By-name interface to Perl's built-in getgr*() functions

=item *

B<<< L<< User::pwent >> >>> - By-name interface to Perl's built-in getpw*() functions

=item *

B<<< L<< VMS::DCLsym >> >>> - Perl extension to manipulate DCL symbols

=item *

B<<< L<< VMS::Filespec >> >>> - Convert between VMS and Unix file specification syntax

=item *

B<<< L<< VMS::Stdio >> >>> - Standard I/O functions via VMS extensions

=item *

B<<< L<< Win32 >> >>> - Interfaces to some Win32 API Functions

=item *

B<<< L<< Win32API::File >> >>> - Low-level access to Win32 system API calls for files/dirs.

=item *

B<<< L<< Win32CORE >> >>> - Win32 CORE function stubs

=item *

B<<< L<< XS::APItest >> >>> - Test the perl C API

=item *

B<<< L<< XS::Typemap >> >>> - Module to test the XS typemaps distributed with perl

=item *

B<<< L<< XSLoader >> >>> - Dynamically load C libraries into Perl code

=item *

B<<< L<< autodie::Scope::Guard >> >>> - Wrapper class for calling subs at end of scope

=item *

B<<< L<< autodie::Scope::GuardStack >> >>> - Hook stack for managing scopes via %^H

=item *

B<<< L<< autodie::Util >> >>> - Internal Utility subroutines for autodie and Fatal

=item *

B<<< L<< version::Internals >> >>> - Perl extension for Version Objects

=back